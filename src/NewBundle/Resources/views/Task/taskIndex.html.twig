{% extends 'layout.html.twig' %}

{% block body %}
	{{ parent() }}
    
	<div class="container">
		<div class="col-md-12">
			<div class="page-header margin-none">
				<h2 class="padding-none">{% trans %}Tasks{% endtrans %}</h2>
			</div>
			<div class="table-responsive">
                <input type="text" class="filter_inputs" name="title" placeholder="{% trans %}Username Filter{% endtrans %}">
                <input type="text" class="filter_inputs" name="first_name" placeholder="{% trans %}First name Filter{% endtrans %}">
                <input type="text" class="filter_inputs" name="last_name" placeholder="{% trans %}Last name Filter{% endtrans %}">
                <button class="btn btn-success" id="FilterBtn">Aceptar</button>
				<table class="table table-striped table-hover" id="taskIndexTable">
					<thead>
						<tr>
							<th>{{ 'Title'|trans }}</th>
							<th>{{ 'Date'|trans }}</th>
							<th>{{ 'User'|trans }}</th>
							<th>{{ 'Status'|trans }}</th>
						</tr>
					</thead>
				</table>
			</div>
		</div>
	</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('public/plugins/DataTables/datatables.js') }}"></script>

    <script> 
        tableTasks = $('#taskIndexTable').DataTable({
        dom: 'Blrtip',
        order:[0, 'ASC'],
        searching: true,
        rowReorder: true,
        lengthMenu: [[5, 25, 50, 100, -1], [5, 25, 50, 100, "{{('All')|trans}}"]],
        buttons: [
            {
                extend: 'excelHtml5',
            },
            {
                extend: 'pdfHtml5',
                orientation: 'landscape',
                pageSize: 'LEGAL',
            },
        ],
        rowId: 'idRow',
        responsive: true,
        autoWidth: true,
        "processing": true,
        "serverSide": true,
        "pagingType": "full_numbers",
        language: {
            "sProcessing": "{{ ('Processing...') | trans }}",
            "sLengthMenu": "{{ ('Show _MENU_ records') | trans }}",
            "sZeroRecords": "{{ ('Unknown results') | trans }}",
            "sEmptyTable": "{{ ('Non available data in this table') | trans }}",
            "sInfo": "{{ ('Showing records from _START_ to _END_ from a total of _TOTAL_ records') | trans }}",
            "sInfoEmpty": "{{ ('Showing records from 0 to 0 from a total of 0 records') | trans }}",
            "sInfoFiltered": "{{ ('(filtered from a total of _MAX_ registers)') | trans }}",
            "sInfoPostFix": "",
            "sSearch": "{{ ('Search:') | trans }}",
            "sUrl": "",
            "sInfoThousands": ",",
            "sLoadingRecords": "{{ ('Loading...') | trans }}",
            "oPaginate": {
                "sFirst": "{{ ('First') | trans }}",
                "sLast": "{{ ('Last') | trans }}",
                "sNext": "{{ ('Next') | trans }}",
                "sPrevious": "{{ ('Previous') | trans }}",
            },
            "oAria": {
                "sSortAscending": "{{ (': Activate to order column by ascending') | trans }}",
                "sSortDescending": "{{ (': Activate to order column by descending') | trans }}"
            },
        },
        ajax: {
            url: "{{ path('new_task_list') }}",
            method: 'POST',
            data: {}
        },
        columns: [
            { data: {}, render: function(data, row) {
                var pathView = ' {{ path('new_task_view', {id: 'toReplace'}) }}';
                pathView = pathView.replace("toReplace", data['id']);

                html = '<a href="' + pathView + '">' + data["title"] + '</a>';

                return html;
            }},
            { data: 'created_at' },
            { data: 'fullname' },
            { data: {}, render: function(data, row) {
                html = "";
                if(data['status'] == 0){
                    html += '<span class="fa fa-clock-o text-danger" title="{% trans %}Waiting{% endtrans %}" id="glyphicon-' + data['id'] + '"></span>';
                } else if (data['status'] == 1){
                    html += '<span class="fa fa-check text-success" title="{% trans %}Finished{% endtrans %}"></span>';
                }

                return html;
            }},
        ]
        });

        let reloadDataTable = function() {
            var form_filters = new Object();
            $('.filter_inputs').each(function () {
                form_filters[$(this).attr('name')] = $(this).val();
            });
            console.log(form_filters);

            $("#taskIndexTable").DataTable().search(JSON.stringify(form_filters)).draw();

            console.log(JSON.stringify(form_filters));
        }

        $('#FilterBtn').click(function (){
            reloadDataTable();
        });

        document.querySelector(".filter_inputs").forEach(item => {
            item.addEventListener("keyup", function(event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    document.getElementById("FilterBtn").click();
                }
            });
        });

    </script>
{% endblock %}