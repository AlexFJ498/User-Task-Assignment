{% extends "layout.html.twig" %}

{% block body %}
    {{ parent() }}

    <div class="progress no-border hidden" id="delete-progress">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="45" aria-valuemin="0" aria-valuemax="100" 
                                                                             style="width: 100%">
        </div>
    </div>

    <div class="container">
        <div class="col-md-12">
            <div class="page-header margin-none">
                <h2 class="padding-none">{% trans %}Users {% endtrans %}</h2>
            </div>

            <div class="table-responsive">
                <input type="text" class="filter_inputs" name="username" placeholder="{% trans %}Username Filter{% endtrans %}">
                <input type="text" class="filter_inputs" name="first_name" placeholder="{% trans %}First name Filter{% endtrans %}">
                <input type="text" class="filter_inputs" name="last_name" placeholder="{% trans %}Last name Filter{% endtrans %}">
                <input type="text" class="filter_inputs" name="email" placeholder="{% trans %}Email Filter{% endtrans %}">
                <input type="checkbox" class="filter_inputs" id="checkbox" name="is_active" checked>
                <label class="form-check-label" for="checkbox">Activo</label>

                <button class="btn btn-success" id="FilterBtn">Aceptar</button>
                <table class="table table-striped table-hover" id="userIndexTable">
                    <thead>
                        <tr style="text-align: center">
                            <th >{% trans %} Username {% endtrans %}</th>
                            <th>{% trans %} First name {% endtrans %}</th>
                            <th>{% trans %} Last name {% endtrans %}</th>
                            <th>{% trans %} Email {% endtrans %}</th>
                            <th>{% trans %} Role {% endtrans %}</th>
                            <th>{% trans %} Created {% endtrans %}</th>
                            <th>{% trans %} Updated {% endtrans %}</th>
                            <th>{% trans %} Actions {% endtrans %}</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('public/plugins/DataTables/datatables.js') }}"></script>

    <script> 
        tableUsers = $('#userIndexTable').DataTable({
        dom: 'Blrtip',
        order:[0, 'ASC'],
        searching: true,
        rowReorder: true,
                columnDefs: [
                    { orderable: true, className: 'reorder', targets: [0,1,2,3,4,5,6] },
                    { orderable: false, targets: 7 }
                ],
        lengthMenu: [[5, 25, 50, 100, -1], [5, 25, 50, 100, "{{('All')|trans}}"]],
        buttons: [
            {
                extend: 'excelHtml5',
            },
            {
                extend: 'pdfHtml5',
                orientation: 'landscape',
                pageSize: 'LEGAL',
            },
        ],
        rowId: 'idRow',
        responsive: true,
        autoWidth: true,
        "processing": true,
        "serverSide": true,
        "pagingType": "full_numbers",
        language: {
            "sProcessing": "{{ ('Processing...') | trans }}",
            "sLengthMenu": "{{ ('Show _MENU_ records') | trans }}",
            "sZeroRecords": "{{ ('Unknown results') | trans }}",
            "sEmptyTable": "{{ ('Non available data in this table') | trans }}",
            "sInfo": "{{ ('Showing records from _START_ to _END_ from a total of _TOTAL_ records') | trans }}",
            "sInfoEmpty": "{{ ('Showing records from 0 to 0 from a total of 0 records') | trans }}",
            "sInfoFiltered": "{{ ('(filtered from a total of _MAX_ registers)') | trans }}",
            "sInfoPostFix": "",
            "sSearch": "{{ ('Search:') | trans }}",
            "sUrl": "",
            "sInfoThousands": ",",
            "sLoadingRecords": "{{ ('Loading...') | trans }}",
            "oPaginate": {
                "sFirst": "{{ ('First') | trans }}",
                "sLast": "{{ ('Last') | trans }}",
                "sNext": "{{ ('Next') | trans }}",
                "sPrevious": "{{ ('Previous') | trans }}",
            },
            "oAria": {
                "sSortAscending": "{{ (': Activate to order column by ascending') | trans }}",
                "sSortDescending": "{{ (': Activate to order column by descending') | trans }}"
            },
        },
        ajax: {
            url: "{{ path('new_user_list') }}",
            method: 'POST',
            data: { }
        }, drawCallback: function (){
            AllDatatableFunctions()
        },
        columns: [
            { data: 'username' },
            { data: 'first_name' },
            { data: 'last_name' },
            { data: 'email' },
            { data: 'role', render: function(data, row){
                if(data == 'ROLE_ADMIN'){
                    return "{% trans %} Administrator {% endtrans %}";
                } else{
                    return "{% trans %} User {% endtrans %}";
                }
            } },
            { data: 'created_at' },
            { data: 'updated_at' },
            {data: {}, render: function(data, row) {
                var pathView = '{{ path('new_user_view', { id: 'toReplace'}) }}';
                pathView = pathView.replace("toReplace", data['id']);
                var pathEdit = '{{ path('new_user_edit', { id: 'toReplace'}) }}';
                pathEdit = pathEdit.replace("toReplace", data['id']);
                var pathDelete = '{{ path('new_user_delete', { id: 'toReplace'}) }}';
                pathDelete = pathDelete.replace("toReplace", data['id']);

                html =  '<td class="actions">';
                html += '<a href="'+pathView+'" class="btn btn-sm btn-info">{% trans %} View {% endtrans %}</a>';
                html += '<a href="'+pathEdit+'" class="btn btn-sm btn-primary">{% trans %} Edit {% endtrans %}</a>';
                html += '<button class="btn btn-sm btn-danger btn-delete deleteBtn" id="'+data['id']+'">{% trans %} Delete {% endtrans %}</button>';
                html += '</td>';

                return html;
            }}
        ]
        });

        function AllDatatableFunctions(){
            $(".deleteBtn").unbind("click");
            $('.deleteBtn').click(function(){
                Swal.fire({
                    icon: 'warning',
                    title: "{% trans %} Are you sure? {% endtrans %}",
                    text: "{% trans %} You won't be able to revert this! {% endtrans %}",
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: "{% trans %} Yes, delete it! {% endtrans %}",
                    cancelButtonText: "{% trans %} Cancel {% endtrans %}"
                }).then((result) => {
                    if (result.isConfirmed) {
                        let id = $(this).attr("id");
                        DeleteAjax(id);
                    }
                })
            });
        }

        function DeleteAjax(id){
            $.ajax({
                url: "{{ path('new_user_delete') }}", 
                data: {
                    'id': id
                },
                type: 'POST',
                dataType: 'JSON',
                success: function (data) {
                    if(data.status == true) {
                        Swal.fire({
                            icon: 'success',
                            title: "{% trans %} User deleted {% endtrans %}",
                            text: data.message
                        }).then(() => {
                            tableUsers.ajax.reload();
                        })

                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message
                        })
                    } 
                },
                error: function (data) {
                    Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message
                        })
                },
            });
        }

        let reloadDataTable = function() {
            var form_filters = new Object();
            $('.filter_inputs').each(function () {
                if($(this).attr('name') == 'is_active'){
                    let checkState = $("#checkbox").is(":checked") ? "true" : "false";
                    console.log(checkState);
                    form_filters[$(this).attr('name')] = checkState;
                } else{
                form_filters[$(this).attr('name')] = $(this).val();
                }
            });

            $("#userIndexTable").DataTable().search(JSON.stringify(form_filters)).draw();
        }

        $('#FilterBtn').click(function (){
            reloadDataTable();

        });

    </script>
{% endblock %}