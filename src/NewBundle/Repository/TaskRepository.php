<?php

namespace NewBundle\Repository;

use Doctrine\DBAL\DBALException;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository{

    /**
     * Gets the tasks list for the Datatable. It creates 3 different querys, with all the
     * information needed for the table.
     *
     * @param json $params
     * @return json_data
     */
    public function getTasksList($params){
        $qr = $this->getEntityManager()->getConnection(); 

        $columns = [
            0 => "t.title",
            1 => "t.created_at",
            2 => "u.first_name",
            3 => "t.status"
        ];

        $where = $sqlTot = $sqlRec = "";

        if(isset($params['search']) && $params['search']['value'] != '' ){
            $form_filters = $params ['search']['value'];
            $form_filters = json_decode ($form_filters, true);
        }

        if (isset($form_filters['title']) AND !empty($form_filters['title'])){
            $where .= " AND ( t.title LIKE '%". trim($form_filters['title']) ."%')" ;
        }
        if (isset($form_filters['created_at']) AND !empty($form_filters['created_at'])){
            $where .= " AND ( t.created_at LIKE '%". trim($form_filters['created_at']) ."%')" ;
        }
        if (isset($form_filters['first_name']) AND !empty($form_filters['first_name'])){
            $where .= " AND ( u.first_name LIKE '%". trim($form_filters['first_name']) ."%')" ;
        }
        if (isset($form_filters['last_name']) AND !empty($form_filters['last_name'])){
            $where .= " AND ( u.last_name LIKE '%". trim($form_filters['last_name']) ."%')" ;
        }
        if (isset($form_filters['state']) AND !empty($form_filters['state'])){
            $where .= " AND ( t.state LIKE '%". trim($form_filters['state']) ."%')" ;
        }

        if(isset($params['idUser'])) {
            $where .= " AND ( u.id LIKE '%". trim($params['idUser']) ."%')" ;
        }
        
        $sql = " SELECT t.title,
                        t.created_at,
                        concat_ws(' ', u.first_name, u.last_name) AS fullname,
                        t.status,
                        t.id
                 FROM tasks AS t
                 LEFT JOIN users AS u ON u.id = t.user_id
                 WHERE u.is_deleted = 0
               ";
        
        
        try {
            $sqlTot .= $sql;
            $sqlRec .= $sql;

            if (isset($where) && $where != ''){
                $sqlRec .= $where;
            }

            if (isset($params['order'])){
                $sqlRec .= " ORDER BY " . $columns[$params['order'][0]['column']] . " " . $params['order'][0]['dir'];
            } else{
                $sqlRec .= " ORDER BY u.created_at DESC ";
            }

            $limit = " ";

            if($params['length'] != -1){
                $limit = " LIMIT " . $params['start'] . " ," . $params['length'];
            }

            $sqlRecTot = $sqlRec;
            $sqlRec .= $limit;

            $queryTot = $qr->executeQuery($sqlTot)->rowCount();
            $queryRecordsTot = $qr->executeQuery($sqlRecTot)->rowCount();
            $data = $qr->executeQuery($sqlRec)->fetchAll(\PDO::FETCH_ASSOC);

            $json_data = array(
                "draw" => intval($params['draw']),
                "recordsTotal" => intval($queryTot),
                "recordsFiltered" => intval($queryRecordsTot),
                "data" => $data
            );
        } catch (DBALException $e){
            $json_data = $e->getMessage();
        }

        return $json_data;
    }
}
